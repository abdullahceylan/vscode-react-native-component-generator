import React, { PureComponent } from {quotes}react{quotes};
import { View, Text } from {quotes}react-native{quotes};
import PropTypes from {quotes}prop-types{quotes};
import * as styles from {quotes}./{componentName}.styles{quotes};
//import { {componentName}Wrapper } from {quotes}./{componentName}.styles{quotes};

class {componentName} extends PureComponent { 
  constructor(props) {
    super(props);

    this.state = {
      hasError: false,
    };
  }
<legacy>
  componentWillMount = () => {
    console.log('{componentName} will mount');
  }
</legacy>
  componentDidMount = () => {
    console.log('{componentName} mounted');
  }
<legacy>
  componentWillReceiveProps = (nextProps) => {
    console.log('{componentName} will receive props', nextProps);
  }

  componentWillUpdate = (nextProps, nextState) => {
    console.log('{componentName} will update', nextProps, nextState);
  }
</legacy><reactv16>
  static getDerivedStateFromError(error) {
    // getDerivedStateFromError -> Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  componentDidCatch(error, info) {
    // You can also log the error to an error reporting service
  }

  getDerivedStateFromProps = (nextProps, prevState) => {
    console.log('{componentName} getDerivedStateFromProps', nextProps, prevState);
  }

  getSnapshotBeforeUpdate = (prevProps, prevState) => {
    console.log('{componentName} getSnapshotBeforeUpdate', prevProps, prevState);
  }
</reactv16>
  componentDidUpdate = () => {
    console.log('{componentName} did update');
  }

  componentWillUnmount = () => {
    console.log('{componentName} will unmount');
  }

  render () {
    if (this.state.hasError) {
      return (
        <View style={styles.{componentName}Wrapper}>
          <Text>Something went wrong.</Text>
        </View>
      );
    }
    return (
      <View style={styles.{componentName}Wrapper}>
        <Text>Test content</Text>
      </View>
    );
  }
}

{componentName}.propTypes = {
  // bla: PropTypes.string,
};

{componentName}.defaultProps = {
  // bla: 'test',
};

export default {componentName};
